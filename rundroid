#!/bin/sh

# Grab the path to the executable we wish to run on device.
EXECUTABLE="$1"

# We'll be running it in a temporary directory in /data/local/tmp.
DEVICE_TMP_DIR="/data/local/tmp"
DEVICE_UUID_DIR="$DEVICE_TMP_DIR/`uuidgen`"
DEVICE_EXECUTABLE="$DEVICE_UUID_DIR/`basename "$EXECUTABLE"`"
DEVICE_EXECUTABLE_CMD="LD_LIBRARY_PATH=$DEVICE_UUID_DIR:$DEVICE_TMP_DIR $DEVICE_EXECUTABLE"

# Output from running the executable on the device will be piped into these files.
DEVICE_STDOUT="$DEVICE_UUID_DIR/__stdout"
DEVICE_EXITCODE="$DEVICE_UUID_DIR/__exitcode"
DEVICE_RUNDROID="$DEVICE_UUID_DIR/__rundroid"

# Create the temporary directory on the device,
# then push the executable to that directory.
adb shell mkdir -p "$DEVICE_UUID_DIR"
adb push "$EXECUTABLE" "$DEVICE_UUID_DIR" 2>/dev/null || exit 1

# Push a warpper script to the device. This script writes the output from the
# test executable to a file named "__stdout", and if the test executable succeeds,
# writes "RUNDROID_SUCCEEDED" to a file named "__exitcode".
adb shell "echo \"$DEVICE_EXECUTABLE_CMD > $DEVICE_STDOUT && echo \"RUNDROID_SUCCEEDED\" > $DEVICE_EXITCODE\" > $DEVICE_RUNDROID" || exit 1
adb shell chmod 755 "$DEVICE_RUNDROID" || exit 1

# Execute the wrapper script. This runs the original executable on device.
adb shell "$DEVICE_RUNDROID"

# First, check whether the executable succeeded on device.
TMPFILE=$(mktemp /tmp/rundroid.XXXXXX)
adb shell cat "$DEVICE_EXITCODE" > "$TMPFILE"
if ! grep -q "RUNDROID_SUCCEEDED" "$TMPFILE"; then
	echo ""
	echo "Executable '$DEVICE_EXECUTABLE' exited with a non-zero code on the Android device."
	echo "Use the following command to see its output: 'adb shell $DEVICE_EXECUTABLE_CMD'"
	echo ""
	echo "Contents of '$DEVICE_STDOUT':"
	adb shell cat "$DEVICE_STDOUT"
	echo ""
	echo "Contents of '$DEVICE_EXITCODE':"
	adb shell cat "$DEVICE_EXITCODE"
	echo ""
	echo "Re-running executable:"
	echo "+ adb shell $DEVICE_EXECUTABLE_CMD"

	# Exit early. The output isn't passed to FileCheck, nor are any
	# temporary directories removed; this allows the user to re-run
	# the executable on the device.
	adb shell "$DEVICE_EXECUTABLE_CMD" && exit 1
fi

# Then pass the test output to FileCheck.
adb shell cat "$DEVICE_STDOUT"

# Finally, remove all run artifacts.
adb shell rm -rf "$DEVICE_UUID_DIR"
